
name: 'Terraform' 

on:
  push:
    branches: [ "main" ]
  pull_request:
env:
  ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
  ARM_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
  ARM_TENANT_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
  ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_TEANANT_ID}}
#  ROOT_PATH: "${{github.workspace}}/terraformsnipeit"
permissions:
  contents: read

jobs:
  terraform_plan:
    name: "Terraform plan"
    runs-on: ubuntu-latest
    # environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        working-directory: ${{env.ROOT_PATH}}

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan
        working-directory: ${{env.ROOT_PATH}}

  terraform_apply:
    name: "Terraform apply"
    runs-on: ubuntu-latest
    needs: terraform_plan

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        working-directory: ${{env.ROOT_PATH}}

      # Will apply the plan for Terraform
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ${{env.ROOT_PATH}}

  cleanup:
    name: "Cleanup on Failure or Error"
    runs-on: ubuntu-latest
    needs: terraform_apply
    if: ${{ always() && (failure() || cancelled() || needs.terraform_apply.outcome == 'failure') }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ${{env.ROOT_PATH}}
      # steps to perform cleanup actions, e.g., terraform destroy
      - name: Cleanup
        run: terraform destroy -auto-approve
        working-directory: ${{env.ROOT_PATH}}

  destroy_infrastructure:
    name: "destroy theinfrastructure"
    runs-on: ubuntu-latest
    needs: terraform_apply

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ${{env.ROOT_PATH}}

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: ${{env.ROOT_PATH}}
